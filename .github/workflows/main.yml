name: PCGMZ

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 4320

    steps:
      - name: Disable Sleep / Hibernate / PowerSave
        shell: powershell
        run: |
          powercfg /change standby-timeout-ac 0
          powercfg /change monitor-timeout-ac 0
          powercfg /hibernate off
          powercfg /setactive SCHEME_MIN
          echo Disabled Sleep/Hibernate

      - name: Optimize TCP Stack + QoS Gaming
        shell: powershell
        run: |
          netsh interface tcp set heuristics disabled
          netsh interface tcp set global congestionprovider=ctcp
          netsh interface tcp set global rss=enabled
          netsh interface tcp set global chimney=disabled
          netsh interface tcp set global ecncapability=enabled
          echo QoS Gaming Turbo Applied

      - name: Optimize PCGMZ Keepalive
        shell: powershell
        run: |
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'KeepAliveEnable' -Value 1 -PropertyType DWord -Force
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name 'KeepAliveTime' -Value 30000 -PropertyType DWord -Force
          echo RDP KeepAlive Enabled

      - name: Configure Core PCGMZ Settings
        shell: powershell
        run: |
          Start-Process powershell -Verb runAs -ArgumentList @"
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
            netsh advfirewall firewall add rule name='RDP-Allow' dir=in action=allow protocol=TCP localport=3389
            Restart-Service -Name TermService -Force
          "@

      - name: Anti Idle + Session Timeout Policies
        shell: powershell
        run: |
          New-Item -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -ErrorAction SilentlyContinue
          New-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name 'MaxIdleTime' -Value 0 -PropertyType DWord -Force
          New-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name 'fResetBroken' -Value 1 -PropertyType DWord -Force
          echo Idle Disconnect Disabled

      - name: Create PCGMZ User Secure
        shell: powershell
        run: |
          Add-Type -AssemblyName System.Security
          $chars = ([char[]](33..126))
          $password = -join ($chars | Get-Random -Count 14)
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name "PCGMZ" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "PCGMZ" -Password $securePass -AccountNeverExpires
          }
          Add-LocalGroupMember -Group "Administrators" -Member "PCGMZ"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "PCGMZ"
          echo "RDP_USER=PCGMZ" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        shell: powershell
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $file = "$env:TEMP\\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $file
          Start-Process msiexec.exe -ArgumentList "/i `"$file`" /quiet /norestart" -Wait
          Remove-Item $file -Force

      - name: Establish Tailscale
        shell: powershell
        run: |
          & "$env:ProgramFiles\\Tailscale\\tailscale.exe" up --authkey ${{ secrets.TAILSCALE_AUTH_KEY }} --hostname "PCGMZ-${{ github.run_id }}"
          Start-Sleep -Seconds 10
          $tsIP = & "$env:ProgramFiles\\Tailscale\\tailscale.exe" ip -4
          echo "TS_IP=$tsIP" >> $env:GITHUB_ENV

      - name: RDP Stealth Port Randomizer
        shell: powershell
        run: |
          $min = 10000; $max = 60000
          $rnd = Get-Random -Minimum $min -Maximum $max
          $rndPort = [int]$rnd
          Write-Host "Selected stealth RDP port: $rndPort"
          if (Get-NetFirewallRule -DisplayName 'RDP-Allow' -ErrorAction SilentlyContinue) {
            Get-NetFirewallRule -DisplayName 'RDP-Allow' | Set-NetFirewallRule -Enabled False
          }
          if (Get-NetFirewallRule -DisplayName "RDP-Stealth-$rndPort" -ErrorAction SilentlyContinue) {
            Remove-NetFirewallRule -DisplayName "RDP-Stealth-$rndPort" -ErrorAction SilentlyContinue
          }
          New-NetFirewallRule -DisplayName "RDP-Stealth-$rndPort" -Direction Inbound -Action Allow -Protocol TCP -LocalPort $rndPort
          $rdpReg = 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
          New-ItemProperty -Path $rdpReg -Name 'PortNumber' -Value $rndPort -PropertyType DWord -Force
          Restart-Service -Name TermService -Force
          echo "RDP_PORT=$rndPort" >> $env:GITHUB_ENV
          Write-Host "RDP port randomized to $rndPort (firewall rule RDP-Stealth-$rndPort created)"

      - name: Anti-portscan honeypot - install listener script
        shell: powershell
        run: |
          $honeypotPath = "$env:ProgramData\\pcgmz-honeypot"
          New-Item -ItemType Directory -Path $honeypotPath -Force | Out-Null
          $script = @'
          $ports = @(21,22,23,25,53,80,110,143,443,3389,5900)
          $log = Join-Path $env:ProgramData "pcgmz-honeypot\\connections.log"
          function Start-Listener {
            param($p)
            try {
              $listener = [System.Net.Sockets.TcpListener]::new([System.Net.IPAddress]::Any, $p)
              $listener.Start()
              while ($true) {
                if ($listener.Pending()) {
                  $client = $listener.AcceptTcpClient()
                  $ip = $client.Client.RemoteEndPoint.ToString()
                  $time = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
                  "$time - Port $p - Connection from $ip" | Out-File -FilePath $log -Append
                  try {
                    $stream = $client.GetStream()
                    $banner = "220 pcgmz-honeypot\r\n"
                    $buf = [System.Text.Encoding]::ASCII.GetBytes($banner)
                    $stream.Write($buf,0,$buf.Length)
                    $stream.Flush()
                  } catch {}
                  $client.Close()
                } else {
                  Start-Sleep -Milliseconds 200
                }
              }
            } catch {
              "$((Get-Date).ToString()) - Listener failed on port $p : $_" | Out-File -FilePath $log -Append
            }
          }
          foreach ($p in $ports) {
            Start-Job -ScriptBlock { param($pp) Start-Listener -p $pp } -ArgumentList $p | Out-Null
          }
'@
          $file = Join-Path $honeypotPath "honeypot.ps1"
          $script | Out-File -FilePath $file -Encoding ASCII
          $action = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument "-NoProfile -ExecutionPolicy Bypass -File `"$file`""
          $trigger = New-ScheduledTaskTrigger -AtStartup -RepetitionInterval (New-TimeSpan -Minutes 5)
          Register-ScheduledTask -TaskName "PCGMZ-Honeypot" -Action $action -Trigger $trigger -RunLevel Highest -Force
          Start-Process -FilePath "powershell.exe" -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$file`"" -WindowStyle Hidden
          Write-Host "Honeypot installed at $file and scheduled at startup."

      - name: Disguise OS fingerprinting (TCP/IP & registry tweaks)
        shell: powershell
        run: |
          try {
            New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name 'DefaultTTL' -Value 64 -PropertyType DWord -Force
            New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name 'TcpWindowSize' -Value 64240 -PropertyType DWord -Force
            New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name 'Tcp1323Opts' -Value 1 -PropertyType DWord -Force
            Set-SmbServerConfiguration -EnableSMB1Protocol $false -Force
            $servicesToDisable = @('Telnet','Tftp') 
            foreach ($s in $servicesToDisable) {
              if (Get-Service -Name $s -ErrorAction SilentlyContinue) {
                try { Stop-Service -Name $s -Force -ErrorAction SilentlyContinue } catch {}
                try { Set-Service -Name $s -StartupType Disabled } catch {}
              }
            }
            Write-Host "Fingerprint-obfuscation registry tweaks applied (best-effort)."
          } catch {
            Write-Host "Some fingerprint tweaks may not be supported on this runner: $_"
          }

      - name: Game Performance Boost RTX4090 Tweaks
        shell: powershell
        run: |
          powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
          powercfg -setactive e9a42b02-d5df-448d-aa00-03f14749eb61
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\GraphicsDrivers' -Name 'HwSchMode' -Value 2 -PropertyType DWord -Force
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl' -Name 'GPU Priority' -Value 8 -PropertyType DWord -Force
          netsh int tcp set global autotuninglevel=experimental
          echo RTX4090 Game Performance Boost Applied

      - name: GPU passthrough / kernel scheduling boost
        shell: powershell
        run: |
          try {
            New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\GraphicsDrivers' -Name 'HwSchMode' -Value 2 -PropertyType DWord -Force
            New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl' -Name 'GpuFairness' -Value 0 -PropertyType DWord -Force
            Add-Type -AssemblyName kernel32
            $n = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Get-ProcAddress (Get-ModuleHandle kernel32) 'timeBeginPeriod'), [Action[Int32]])
          } catch {
            Write-Host "GPU scheduler tweaks: some commands are best-effort on hosted runner: $_"
          }
          Write-Host "Applied GPU scheduling hints. Note: true GPU passthrough requires hypervisor configuration."

      - name: Enable Ultra Low Latency Mode
        shell: powershell
        run: |
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\PriorityControl" /v Win32PrioritySeparation /t REG_DWORD /d 38 /f
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\GraphicsDrivers' -Name 'HwSchMode' -Value 2 -PropertyType DWord -Force
          Get-NetAdapter | ForEach-Object { 
            try { Set-NetAdapterAdvancedProperty -Name $_.Name -DisplayName 'Interrupt Moderation' -DisplayValue 'Disabled' -NoRestart -ErrorAction SilentlyContinue } catch { }
          }
          Write-Host "Ultra Low Latency Mode applied"

      - name: Enable DirectStorage runtime (if available)
        shell: powershell
        run: |
          if (Get-Command winget -ErrorAction SilentlyContinue) {
            try {
              & winget install --id Microsoft.DirectStorage -e --accept-package-agreements --accept-source-agreements --source winget
              $code = $LASTEXITCODE
              if ($code -ne 0) { Write-Host "winget returned exit code $code. Package may be unavailable in this runner." }
              else { Write-Host "DirectStorage install succeeded (winget exit 0)" }
            } catch {
              Write-Host "winget threw an exception but continuing: $_"
            }
          } else {
            Write-Host "winget not available; skipping DirectStorage install. Manual install recommended: https://aka.ms/directstorage"
          }
          Write-Host "Continuing without DirectStorage..."
          exit 0

      - name: Anti-configuration sanity: show RDP port
        shell: powershell
        run: |
          Write-Host "Configured RDP port (from registry):"
          $rdpReg = 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp'
          try {
            $port = (Get-ItemProperty -Path $rdpReg -Name PortNumber -ErrorAction Stop).PortNumber
            Write-Host "RDP PortNumber (registry) = $port"
          } catch {
            Write-Host "Unable to read RDP PortNumber from registry: $_"
          }

      - name: Verify PCGMZ 
        shell: powershell
        run: |
          $port = $env:RDP_PORT
          if (-not $port) { $port = 3389 }
          $result = Test-NetConnection -ComputerName $env:TS_IP -Port $port
          if (-not $result.TcpTestSucceeded) { 
            Write-Host "Connection test to $env:TS_IP on port $port failed."
            exit 1
          } else {
            Write-Host "Connection to $env:TS_IP on port $port succeeded."
          }

      - name: Auto Reconnect Monitor
        shell: powershell
        run: |
          $script = @"
          while ($true) {
            if (-not (Test-Connection 8.8.8.8 -Count 1 -Quiet)) {
              Restart-Service TermService -Force
              Get-NetAdapter | Disable-NetAdapter -Confirm:$false; Start-Sleep 2; Get-NetAdapter | Enable-NetAdapter -Confirm:$false
            }
            Start-Sleep 15
          }
          "@
          $path = "$env:ProgramData\\rdp-monitor.ps1"
          $script | Out-File $path
          Start-Process powershell -ArgumentList "-ExecutionPolicy Bypass -File $path"

      - name: Maintain Connection
        shell: powershell
        run: |
          Write-Host "==============================="
          Write-Host "PCGMZ Info:"
          Write-Host "Address: $env:TS_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host "==============================="
          while ($true) {
              Write-Host "[$(Get-Date)] PCGMZ Session still running..."
              Start-Sleep -Seconds 300
          }
