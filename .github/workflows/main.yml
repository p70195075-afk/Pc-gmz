name: PCGMZ

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 4320

    steps:
      - name: Disable Sleep / Hibernate / PowerSave
        shell: powershell
        run: |
          powercfg /change standby-timeout-ac 0
          powercfg /change monitor-timeout-ac 0
          powercfg /hibernate off
          powercfg /setactive SCHEME_MIN
          echo Disabled Sleep/Hibernate

      - name: Optimize TCP Stack + QoS Gaming
        shell: powershell
        run: |
          netsh interface tcp set heuristics disabled
          netsh interface tcp set global congestionprovider=ctcp
          netsh interface tcp set global rss=enabled
          netsh interface tcp set global chimney=disabled
          netsh interface tcp set global ecncapability=enabled
          echo QoS Gaming Turbo Applied

      - name: Optimize RDP Keepalive
        shell: powershell
        run: |
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'KeepAliveEnable' -Value 1 -PropertyType DWord -Force
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name 'KeepAliveTime' -Value 30000 -PropertyType DWord -Force
          echo RDP KeepAlive Enabled

      - name: Anti Idle + Session Timeout Policies
        shell: powershell
        run: |
          New-Item -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -ErrorAction SilentlyContinue
          New-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name 'MaxIdleTime' -Value 0 -PropertyType DWord -Force
          New-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name 'fResetBroken' -Value 1 -PropertyType DWord -Force
          echo Idle Disconnect Disabled

      - name: Configure Core RDP Settings
        shell: powershell
        run: |
          Write-Host "=== Enabling Remote Desktop ==="
          Start-Process powershell -Verb runAs -ArgumentList @"
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'SecurityLayer' -Value 0 -Force
            netsh advfirewall firewall delete rule name='RDP-Tailscale'
            netsh advfirewall firewall add rule name='RDP-Tailscale' dir=in action=allow protocol=TCP localport=3389
            Restart-Service -Name TermService -Force
          "@

      - name: Create RDP User with Secure Password
        shell: powershell
        run: |
          Add-Type -AssemblyName System.Security
          $chars = ([char[]](33..126))
          $password = -join ($chars | Get-Random -Count 14)
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name "PCGMZ" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "PCGMZ" -Password $securePass -AccountNeverExpires
          }
          Add-LocalGroupMember -Group "Administrators" -Member "PCGMZ"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "PCGMZ"
          echo "RDP_USER=PCGMZ" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        shell: powershell
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $file = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $file
          Start-Process msiexec.exe -ArgumentList "/i `"$file`" /quiet /norestart" -Wait
          Remove-Item $file -Force

      - name: Establish Tailscale Connection
        shell: powershell
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey ${{ secrets.TAILSCALE_AUTH_KEY }} --hostname "PCGMZ-${{ github.run_id }}"
          Start-Sleep -Seconds 10
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          if (-not $tsIP) { Write-Error "Tailscale IP not found"; exit 1 }
          echo "TS_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        shell: powershell
        run: |
          Write-Host "Testing TCP 3389 on $env:TS_IP ..."
          $result = Test-NetConnection -ComputerName $env:TS_IP -Port 3389
          if (-not $result.TcpTestSucceeded) { Write-Error "RDP port unreachable"; exit 1 }

      - name: Auto Reconnect Monitor
        shell: powershell
        run: |
          $script = @"
          while ($true) {
            if (-not (Test-Connection 8.8.8.8 -Count 1 -Quiet)) {
              Restart-Service TermService -Force
              Get-NetAdapter | Disable-NetAdapter -Confirm:$false; Start-Sleep 2; Get-NetAdapter | Enable-NetAdapter -Confirm:$false
            }
            Start-Sleep 15
          }
          "@
          $path = "$env:ProgramData\rdp-monitor.ps1"
          $script | Out-File $path
          Start-Process powershell -ArgumentList "-ExecutionPolicy Bypass -File $path"

      - name: Maintain Connection
        shell: powershell
        run: |
          Write-Host "==============================="
          Write-Host "PCGMZ Info:"
          Write-Host "Address: $env:TS_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host "==============================="
          while ($true) {
              Write-Host "[$(Get-Date)] PCGMZ Session still running..."
              Start-Sleep -Seconds 300
          }
