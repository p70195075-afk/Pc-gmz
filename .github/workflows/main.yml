name: PCGMZ Sunshine Moonlight

on:
  workflow_dispatch:

jobs:
  sunshine-moonlight:
    runs-on: windows-latest
    timeout-minutes: 4680

    steps:
      - name: Disable Sleep / Hibernate / PowerSave
        shell: powershell
        run: |
          powercfg /change standby-timeout-ac 0
          powercfg /change monitor-timeout-ac 0
          powercfg /hibernate off
          powercfg /setactive SCHEME_MIN
          echo Disabled Sleep/Hibernate

      - name: Optimize Network for Streaming
        shell: powershell
        run: |
          netsh interface tcp set global congestionprovider=ctcp
          netsh interface tcp set global rss=enabled
          netsh interface tcp set global ecncapability=enabled
          netsh int tcp set global autotuninglevel=experimental
          netsh interface tcp set global timestamps=disabled
          echo Network Streaming Optimization Applied

      - name: Configure Core RDP Settings
        shell: powershell
        run: |
          Start-Process powershell -Verb runAs -ArgumentList @"
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
            netsh advfirewall firewall add rule name='RDP-Allow' dir=in action=allow protocol=TCP localport=3389
            Restart-Service -Name TermService -Force
          "@

      - name: Create PCGMZ User
        shell: powershell
        run: |
          Add-Type -AssemblyName System.Security
          $chars = ([char[]](33..126))
          $password = -join ($chars | Get-Random -Count 14)
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name "PCGMZ" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "PCGMZ" -Password $securePass -AccountNeverExpires
          }
          Add-LocalGroupMember -Group "Administrators" -Member "PCGMZ"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "PCGMZ"
          echo "RDP_USER=PCGMZ" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      - name: Install Latest Sunshine (Fixed Version)
        shell: powershell
        run: |
          # Fixed: Use specific working version instead of latest
          $url = "https://github.com/LizardByte/Sunshine/releases/download/v0.23.0/sunshine-windows-portable.zip"
          $file = "$env:TEMP\sunshine.zip"
          $extractPath = "C:\Sunshine"
          
          echo "Downloading Sunshine v0.23.0 (stable)..."
          try {
              Invoke-WebRequest -Uri $url -OutFile $file -TimeoutSec 300
              echo "Download successful"
          } catch {
              echo "Download failed, trying alternative URL..."
              # Alternative download URL
              $url = "https://nightly.link/LizardByte/Sunshine/workflows/build/master/sunshine-windows-portable.zip"
              Invoke-WebRequest -Uri $url -OutFile $file -TimeoutSec 300
          }
          
          echo "Extracting Sunshine..."
          # Clean up existing directory first
          if (Test-Path $extractPath) {
              Remove-Item -Path $extractPath -Recurse -Force
          }
          
          # Create directory and extract
          New-Item -Path $extractPath -ItemType Directory -Force
          Expand-Archive -Path $file -DestinationPath $extractPath -Force
          
          # Verify extraction
          if (Test-Path "$extractPath\sunshine.exe") {
              echo "‚úÖ Sunshine extracted successfully"
          } else {
              echo "‚ùå Sunshine extraction failed - checking contents..."
              Get-ChildItem $extractPath -Recurse
              exit 1
          }
          
          Remove-Item $file -Force -ErrorAction SilentlyContinue
          echo "Sunshine installed to $extractPath"

      - name: Configure Sunshine Pre-Service
        shell: powershell
        run: |
          $sunshinePath = "C:\Sunshine"
          $configDir = "$env:APPDATA\Sunshine"
          
          # Create config directory
          New-Item -Path $configDir -ItemType Directory -Force
          
          echo "Sunshine config directory created at $configDir"

      - name: Install Tailscale
        shell: powershell
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $file = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $file
          Start-Process msiexec.exe -ArgumentList "/i `"$file`" /quiet /norestart" -Wait
          Remove-Item $file -Force
          echo "Tailscale installed successfully"

      - name: Establish Tailscale Connection
        shell: powershell
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey ${{ secrets.TAILSCALE_AUTH_KEY }} --hostname "PCGMZ-Sunshine-${{ github.run_id }}"
          Start-Sleep -Seconds 10
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          echo "TS_IP=$tsIP" >> $env:GITHUB_ENV
          echo "Tailscale connected: $tsIP"

      - name: Configure Sunshine Firewall Rules
        shell: powershell
        run: |
          # Sunshine default ports
          $ports = @(47984, 47989, 47990, 48010, 47998, 47999, 48000, 48002, 48010)
          
          foreach ($port in $ports) {
              netsh advfirewall firewall add rule name="Sunshine-$port-TCP" dir=in action=allow protocol=TCP localport=$port 2>&1 | Out-Null
              netsh advfirewall firewall add rule name="Sunshine-$port-UDP" dir=in action=allow protocol=UDP localport=$port 2>&1 | Out-Null
          }
          
          # Allow only from Tailscale network
          New-NetFirewallRule -DisplayName "Sunshine-Tailscale-Only" -Direction Inbound -Protocol TCP -LocalPort 47989 -Action Allow -RemoteAddress "100.64.0.0/10" -ErrorAction SilentlyContinue
          
          echo "Sunshine firewall rules configured"

      - name: Optimize Sunshine Performance
        shell: powershell
        run: |
          # Set high performance power plan
          powercfg -setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
          
          # Optimize for software encoding
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\PriorityControl" /v Win32PrioritySeparation /t REG_DWORD /d 38 /f
          
          echo "Sunshine performance optimized"

      - name: Install and Start Sunshine Service
        shell: powershell
        run: |
          $sunshinePath = "C:\Sunshine"
          
          # First run Sunshine to generate initial config
          echo "Starting Sunshine for initial configuration..."
          $process = Start-Process -FilePath "$sunshinePath\sunshine.exe" -PassThru -NoNewWindow
          Start-Sleep -Seconds 10
          
          # Stop the process
          Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 2
          
          # Install as service
          echo "Installing Sunshine as Windows Service..."
          Start-Process -FilePath "$sunshinePath\sunshine.exe" -ArgumentList "--install" -Wait -NoNewWindow
          
          # Start the service
          Start-Service -Name "Sunshine" -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 5
          
          echo "Sunshine service installation completed"

      - name: RDP Port Randomizer
        shell: powershell
        run: |
          $randomPort = Get-Random -Minimum 10000 -Maximum 65535
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'PortNumber' -Value $randomPort -Force
          
          # Update firewall rule for new RDP port
          netsh advfirewall firewall add rule name="RDP-Random-$randomPort" dir=in action=allow protocol=TCP localport=$randomPort 2>&1 | Out-Null
          
          Restart-Service -Name TermService -Force
          echo "RDP_PORT=$randomPort" >> $env:GITHUB_ENV
          echo "RDP port randomized to: $randomPort"

      - name: Verify Sunshine Installation
        shell: powershell
        run: |
          # Check if Sunshine service exists and is running
          $service = Get-Service -Name "Sunshine" -ErrorAction SilentlyContinue
          if (-not $service) {
              echo "‚ùå Sunshine service not found"
              echo "Trying to install service again..."
              Start-Process -FilePath "C:\Sunshine\sunshine.exe" -ArgumentList "--install" -Wait -NoNewWindow
              Start-Service -Name "Sunshine" -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
              $service = Get-Service -Name "Sunshine" -ErrorAction SilentlyContinue
          }
          
          if ($service -and $service.Status -eq 'Running') {
              echo "‚úÖ Sunshine service is RUNNING"
          } else {
              echo "‚ö†Ô∏è Sunshine service not running, attempting to start..."
              Start-Service -Name "Sunshine" -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 3
              $service = Get-Service -Name "Sunshine"
              if ($service.Status -eq 'Running') {
                  echo "‚úÖ Sunshine service started successfully"
              } else {
                  echo "‚ùå Could not start Sunshine service"
                  # Don't fail the workflow - continue anyway
              }
          }
          
          # Test Sunshine port
          $result = Test-NetConnection -ComputerName localhost -Port 47989 -WarningAction SilentlyContinue
          if ($result.TcpTestSucceeded) {
              echo "‚úÖ Sunshine port 47989 is OPEN"
          } else {
              echo "‚ö†Ô∏è Sunshine port 47989 not accessible yet, may need more time"
          }
          
          # Display Tailscale IP
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          Write-Host "üåê Tailscale IP: $tsIP"

      - name: Create Connection Monitor
        shell: powershell
        run: |
          $script = @'
          while ($true) {
              try {
                  # Check Sunshine service
                  $sunshine = Get-Service -Name "Sunshine" -ErrorAction SilentlyContinue
                  if ($sunshine -and $sunshine.Status -ne 'Running') {
                      Write-Host "[$(Get-Date)] Sunshine service stopped - RESTARTING"
                      Start-Service -Name "Sunshine" -ErrorAction SilentlyContinue
                  }
                  
                  # Check network connectivity
                  if (-not (Test-Connection 8.8.8.8 -Count 1 -Quiet)) {
                      Write-Host "[$(Get-Date)] Network issue detected - RESETTING"
                      Get-NetAdapter | Restart-NetAdapter -Confirm:$false
                  }
                  
                  Write-Host "[$(Get-Date)] System OK - Sunshine monitoring active"
              }
              catch {
                  Write-Host "[$(Get-Date)] Monitor error: $_"
              }
              
              Start-Sleep -Seconds 30
          }
          $scriptPath = "$env:ProgramData\sunshine-monitor.ps1"
          $script | Out-File -FilePath $scriptPath -Encoding utf8
          Start-Process powershell -ArgumentList "-ExecutionPolicy Bypass -File $scriptPath" -WindowStyle Hidden
          echo "Background monitor started"

      - name: Display Connection Info
        shell: powershell
        run: |
          $tsIP = $env:TS_IP
          
          Write-Host ""
          Write-Host "=========================================="
          Write-Host "üéÆ PCGMZ SUNSHINE READY FOR MOONLIGHT"
          Write-Host "=========================================="
          Write-Host ""
          Write-Host "üåê Sunshine Host: $tsIP"
          Write-Host "üîë Port: 47989"
          Write-Host ""
          Write-Host "üì± MOONLIGHT SETUP:"
          Write-Host "1. Install Moonlight app on your device"
          Write-Host "2. Add PC manually: $tsIP"
          Write-Host "3. First setup: Access https://$tsIP`:47989"
          Write-Host "4. Default PIN: 1234 (may be requested)"
          Write-Host ""
          Write-Host "üñ•Ô∏è RDP Access: $tsIP`:$env:RDP_PORT"
          Write-Host "üë§ User: $env:RDP_USER" 
          Write-Host "üîí Pass: $env:RDP_PASS"
          Write-Host ""
          Write-Host "‚ö° If connection fails:"
          Write-Host "   - Wait 2-3 minutes for full startup"
          Write-Host "   - Check Tailscale connection"
          Write-Host "   - Restart Sunshine service if needed"
          Write-Host ""
          Write-Host "=========================================="

      - name: Maintain Session
        shell: powershell
        run: |
          $tsIP = $env:TS_IP
          $minutesRunning = 0
          
          while ($true) {
              try {
                  # Check if Sunshine is responsive
                  $portTest = Test-NetConnection -ComputerName localhost -Port 47989 -WarningAction SilentlyContinue
                  
                  if ($portTest.TcpTestSucceeded) {
                      Write-Host "[$(Get-Date)] ‚úÖ Sunshine Active - $tsIP (Running: ${minutesRunning} minutes)"
                  } else {
                      Write-Host "[$(Get-Date)] ‚ö†Ô∏è  Sunshine Port Closed - Attempting restart..."
                      Restart-Service -Name "Sunshine" -Force -ErrorAction SilentlyContinue
                  }
                  
                  $minutesRunning += 5
              }
              catch {
                  Write-Host "[$(Get-Date)] ‚ùå Maintenance Error: $_"
              }
              
              Start-Sleep -Seconds 300
          }
