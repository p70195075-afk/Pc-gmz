name: PCGMZ Moonlight Sunshine

on:
  workflow_dispatch:

jobs:
  secure-rdp-moonlight:
    runs-on: windows-latest
    timeout-minutes: 4680

    steps:
      - name: Disable Sleep / Hibernate / PowerSave
        shell: powershell
        run: |
          powercfg /change standby-timeout-ac 0
          powercfg /change monitor-timeout-ac 0
          powercfg /hibernate off
          powercfg /setactive SCHEME_MIN
          echo "Disabled Sleep/Hibernate"

      - name: Optimize TCP Stack + QoS Gaming
        shell: powershell
        run: |
          netsh interface tcp set heuristics disabled
          netsh interface tcp set global congestionprovider=ctcp
          netsh interface tcp set global rss=enabled
          netsh interface tcp set global chimney=disabled
          netsh interface tcp set global ecncapability=enabled
          echo "QoS Gaming Turbo Applied"

      - name: Create PCGMZ User Secure
        shell: powershell
        run: |
          Add-Type -AssemblyName System.Security
          $chars = ([char[]](33..126))
          $password = -join ($chars | Get-Random -Count 14)
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name "PCGMZ" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "PCGMZ" -Password $securePass -AccountNeverExpires
          }
          Add-LocalGroupMember -Group "Administrators" -Member "PCGMZ"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "PCGMZ"
          echo "RDP_USER=PCGMZ" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      - name: Install Sunshine Moonlight Host (FAST)
        shell: powershell
        run: |
          # Download dan install Sunshine - lightweight alternative
          $url = "https://github.com/LizardByte/Sunshine/releases/download/v0.23.0/sunshine-windows-portable.zip"
          $file = "$env:TEMP\sunshine.zip"
          $extractPath = "C:\Sunshine"
          
          Write-Host "Downloading Sunshine..."
          Invoke-WebRequest -Uri $url -OutFile $file -TimeoutSec 120
          
          Write-Host "Extracting Sunshine..."
          Expand-Archive -Path $file -DestinationPath $extractPath -Force
          Remove-Item $file -Force
          
          Write-Host "Installing Sunshine as service..."
          Start-Process -FilePath "$extractPath\sunshine.exe" -ArgumentList "--install" -Wait
          
          # Start Sunshine service
          Start-Service -Name "Sunshine" -ErrorAction SilentlyContinue
          
          echo "Sunshine installed successfully in 3-5 minutes"

      - name: Configure Sunshine for Optimal Streaming
        shell: powershell
        run: |
          # Tunggu sebentar untuk service fully started
          Start-Sleep -Seconds 10
          
          # Default credentials untuk Sunshine web UI
          $sunshineConfig = @"
          {
            "username": "admin",
            "password": "admin",
            "port": 47990
          }
          
          # Create config directory jika belum ada
          $configDir = "$env:APPDATA\Sunshine"
          New-Item -ItemType Directory -Path $configDir -Force
          
          # Basic configuration untuk streaming optimal
          $sunshineSettings = @"
          {
            "streaming": {
              "encoder": "auto",
              "resolution": "1920x1080",
              "fps": 60,
              "bitrate": 20000,
              "hevc_mode": 0
            },
            "adapter_name": "auto"
          }
          
          $sunshineSettings | Out-File -FilePath "$configDir\sunshine.conf" -Force
          echo "Sunshine configured for 1080p 60fps streaming"

      - name: Open Sunshine Streaming Ports
        shell: powershell
        run: |
          # Sunshine default ports untuk streaming
          $ports = @(47984, 47989, 47990, 48010)
          foreach ($port in $ports) {
              netsh advfirewall firewall add rule name="Sunshine-$port-TCP" dir=in action=allow protocol=TCP localport=$port
              netsh advfirewall firewall add rule name="Sunshine-$port-UDP" dir=in action=allow protocol=UDP localport=$port
          }
          echo "Sunshine streaming ports opened"

      - name: Install Tailscale
        shell: powershell
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $file = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $file
          Start-Process msiexec.exe -ArgumentList "/i `"$file`" /quiet /norestart" -Wait
          Remove-Item $file -Force

      - name: Establish Tailscale Connection
        shell: powershell
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey ${{ secrets.TAILSCALE_AUTH_KEY }} --hostname "PCGMZ-Sunshine-${{ github.run_id }}"
          Start-Sleep -Seconds 10
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          echo "TS_IP=$tsIP" >> $env:GITHUB_ENV
          echo "Tailscale connected: $tsIP"

      - name: Enable RDP for Management
        shell: powershell
        run: |
          Start-Process powershell -Verb runAs -ArgumentList 'Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0 -Force; netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389; Restart-Service -Name TermService -Force'
          echo "RDP Enabled for management"

      - name: Randomize RDP Port for Security
        shell: powershell
        run: |
          $randomPort = Get-Random -Minimum 10000 -Maximum 65535
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'PortNumber' -Value $randomPort -Force
          netsh advfirewall firewall add rule name="RDP-Random" dir=in action=allow protocol=TCP localport=$randomPort
          Restart-Service -Name TermService -Force
          echo "RDP_PORT=$randomPort" >> $env:GITHUB_ENV
          echo "RDP Port randomized to: $randomPort"

      - name: Optimize Streaming Performance
        shell: powershell
        run: |
          # Optimasi sistem untuk streaming
          powercfg -setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c  # High performance
          
          # GPU optimizations
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\GraphicsDrivers' -Name 'HwSchMode' -Value 2 -PropertyType DWord -Force -ErrorAction SilentlyContinue
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl' -Name 'GPU Priority' -Value 8 -PropertyType DWord -Force -ErrorAction SilentlyContinue
          
          # Network optimizations
          netsh int tcp set global autotuninglevel=experimental
          netsh interface tcp set global timestamps=disabled
          
          echo "Streaming performance optimized"

      - name: Verify Sunshine Service
        shell: powershell
        run: |
          # Check if Sunshine service is running
          $service = Get-Service -Name "Sunshine" -ErrorAction SilentlyContinue
          if ($service -and $service.Status -eq 'Running') {
              echo "‚úÖ Sunshine service is RUNNING"
          } else {
              echo "‚ùå Sunshine service not running, attempting to start..."
              Start-Service -Name "Sunshine" -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
              $service = Get-Service -Name "Sunshine" -ErrorAction SilentlyContinue
              if ($service.Status -eq 'Running') {
                  echo "‚úÖ Sunshine service started successfully"
              } else {
                  echo "‚ùå Failed to start Sunshine service"
              }
          }
          
          # Test Sunshine web UI
          try {
              $response = Invoke-WebRequest -Uri "http://localhost:47990" -TimeoutSec 10 -ErrorAction SilentlyContinue
              echo "‚úÖ Sunshine web UI is accessible"
          } catch {
              echo "‚ö†Ô∏è Sunshine web UI not accessible yet (may need more time)"
          }

      - name: Final Sunshine Setup Complete
        shell: powershell
        run: |
          Write-Host ""
          Write-Host "=========================================="
          Write-Host "üéÆ PCGMZ SUNSHINE READY FOR MOONLIGHT üéÆ"
          Write-Host "=========================================="
          Write-Host ""
          Write-Host "üåê TAILSCALE IP: $env:TS_IP"
          Write-Host "üë§ USERNAME: $env:RDP_USER" 
          Write-Host "üîë PASSWORD: $env:RDP_PASS"
          Write-Host "üîí RDP PORT: $env:RDP_PORT"
          Write-Host ""
          Write-Host "üì° SUNSHINE PORTS: 47984-48010"
          Write-Host "üåê SUNSHINE WEB UI: http://$env:TS_IP:47990"
          Write-Host "   Username: admin"
          Write-Host "   Password: admin"
          Write-Host ""
          Write-Host "üì± MOONLIGHT SETUP:"
          Write-Host "1. Install Moonlight app"
          Write-Host "2. Add PC manually: $env:TS_IP"
          Write-Host "3. Stream langsung atau akses RDP dulu"
          Write-Host ""
          Write-Host "‚ö° SUNSHINE ADVANTAGES:"
          Write-Host "‚úÖ Universal compatibility"
          Write-Host "‚úÖ Fast installation (5-10 mins)"
          Write-Host "‚úÖ Open source & customizable"
          Write-Host "‚úÖ Works with any GPU"
          Write-Host ""
          Write-Host "=========================================="

      - name: Maintain Connection
        shell: powershell
        run: |
          while ($true) {
              Write-Host "[$(Get-Date)] üéÆ PCGMZ Sunshine Active - Connect via Moonlight to: $env:TS_IP"
              # Restart Sunshine jika mati
              $service = Get-Service -Name "Sunshine" -ErrorAction SilentlyContinue
              if ($service.Status -ne 'Running') {
                  Write-Host "Restarting Sunshine service..."
                  Start-Service -Name "Sunshine"
              }
              Start-Sleep -Seconds 300
          }
