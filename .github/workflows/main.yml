name: PCGMZ

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    # Runner timeout updated to 78 hours (72h runner + 6h chain headroom)
    timeout-minutes: 4680

    steps:
      - name: Disable Sleep / Hibernate / PowerSave
        shell: powershell
        run: |
          powercfg /change standby-timeout-ac 0
          powercfg /change monitor-timeout-ac 0
          powercfg /hibernate off
          powercfg /setactive SCHEME_MIN
          echo Disabled Sleep/Hibernate

      - name: Optimize TCP Stack + QoS Gaming
        shell: powershell
        run: |
          netsh interface tcp set heuristics disabled
          netsh interface tcp set global congestionprovider=ctcp
          netsh interface tcp set global rss=enabled
          netsh interface tcp set global chimney=disabled
          netsh interface tcp set global ecncapability=enabled
          netsh int tcp set global autotuninglevel=experimental
          echo QoS Gaming Turbo Applied

      - name: Optimize PCGMZ Keepalive
        shell: powershell
        run: |
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'KeepAliveEnable' -Value 1 -PropertyType DWord -Force
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name 'KeepAliveTime' -Value 30000 -PropertyType DWord -Force
          echo RDP KeepAlive Enabled

      - name: Configure Core PCGMZ Settings
        shell: powershell
        run: |
          Start-Process powershell -Verb runAs -ArgumentList @"
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
            netsh advfirewall firewall add rule name='RDP-Allow' dir=in action=allow protocol=TCP localport=3389
            Restart-Service -Name TermService -Force
          "@

      - name: Anti Idle + Session Timeout Policies
        shell: powershell
        run: |
          New-Item -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -ErrorAction SilentlyContinue
          New-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name 'MaxIdleTime' -Value 0 -PropertyType DWord -Force
          New-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name 'fResetBroken' -Value 1 -PropertyType DWord -Force
          echo Idle Disconnect Disabled

      - name: Create PCGMZ User Secure
        shell: powershell
        run: |
          Add-Type -AssemblyName System.Security
          $chars = ([char[]](33..126))
          $password = -join ($chars | Get-Random -Count 14)
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name "PCGMZ" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "PCGMZ" -Password $securePass -AccountNeverExpires
          }
          Add-LocalGroupMember -Group "Administrators" -Member "PCGMZ"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "PCGMZ"
          echo "RDP_USER=PCGMZ" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        shell: powershell
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $file = "$env:TEMP\\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $file
          Start-Process msiexec.exe -ArgumentList "/i `"$file`" /quiet /norestart" -Wait
          Remove-Item $file -Force

      - name: Establish Tailscale
        shell: powershell
        run: |
          & "$env:ProgramFiles\\Tailscale\\tailscale.exe" up --authkey ${{ secrets.TAILSCALE_AUTH_KEY }} --hostname "PCGMZ-${{ github.run_id }}"
          Start-Sleep -Seconds 10
          $tsIP = & "$env:ProgramFiles\\Tailscale\\tailscale.exe" ip -4
          echo "TS_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Restrict Firewall to Tailscale-only (DDoS 0% public access)
        shell: powershell
        run: |
          # Remove public RDP rule and only allow inbound on the Tailscale interface
          netsh advfirewall firewall delete rule name="RDP-Allow"
          $tsIf = (Get-NetAdapter | Where-Object { $_.InterfaceDescription -match 'Tailscale' -or $_.Name -match 'Tailscale' } | Select-Object -First 1).InterfaceAlias
          if ($tsIf) {
            netsh advfirewall firewall add rule name="RDP-Tailscale-Only" dir=in action=allow interface=$tsIf protocol=TCP localport=3389
            Write-Host "Firewall restricted to Tailscale interface: $tsIf"
          } else {
            Write-Host "Tailscale interface not found â€” keeping conservative firewall rules."
          }

      - name: RDP stealth port randomizer (runtime)
        shell: powershell
        run: |
          # Choose a high random port and set RDP to listen on it. Keep previous port stored in ENV.
          $min=49152; $max=65535
          $randPort = Get-Random -Minimum $min -Maximum $max
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'PortNumber' -Value $randPort -Force
          Restart-Service -Name TermService -Force
          echo "RDP_PORT=$randPort" >> $env:GITHUB_ENV
          Write-Host "RDP randomized to port $randPort"

      - name: Anti-portscan honeypot (lightweight)
        shell: powershell
        run: |
          # Lightweight TCP honeypot that listens on common RDP port 3389 and logs connection attempts (no auth)
          $log = "C:\ProgramData\pcgmz-honeypot.log"
          $listenerScript = @'
          $listener = [System.Net.Sockets.TcpListener]3389
          $listener.Start()
          while ($true) {
            $client = $listener.AcceptTcpClient()
            $ep = $client.Client.RemoteEndPoint.ToString()
            "$((Get-Date).ToString('s')) - Connection from $ep" | Out-File -FilePath "C:\ProgramData\pcgmz-honeypot.log" -Append
            # consume a small banner and close to mimic RDP handshake
            $stream = $client.GetStream()
            $bytes = [Text.Encoding]::ASCII.GetBytes("RDP-FAKE-OK`n")
            $stream.Write($bytes,0,$bytes.Length)
            $stream.Flush()
            $client.Close()
            Start-Sleep -Milliseconds 50
          }
'@
          $path = "$env:ProgramData\\pcgmz-honeypot.ps1"
          $listenerScript | Out-File -FilePath $path -Encoding ascii
          Start-Process powershell -ArgumentList "-ExecutionPolicy Bypass -File $path" -WindowStyle Hidden
          Write-Host "Honeypot started (logging to $log)"

      - name: Brute-force autoban (Event Log monitor)
        shell: powershell
        run: |
          # Monitor Security log for failed RDP logons and add temporary block rules for aggressive IPs
          $script = @"
          while ($true) {
            $events = Get-WinEvent -FilterHashtable @{LogName='Security'; Id=4625} -MaxEvents 50 -ErrorAction SilentlyContinue
            foreach ($e in $events) {
              $msg = $e.ToXml()
              if ($msg -match '<IpAddress>([0-9\.]+)</IpAddress>') {
                $ip=$matches[1]
                if ($ip -and $ip -ne '::1' -and $ip -ne '127.0.0.1') {
                  # Check occurrence count in recent logs
                  $recent = (Get-WinEvent -FilterHashtable @{LogName='Security'; Id=4625; StartTime=(Get-Date).AddMinutes(-10)} | Where-Object { $_.ToXml() -match $ip }).Count
                  if ($recent -ge 5) {
                    # Block IP using firewall for 1 hour
                    netsh advfirewall firewall add rule name="Block-$ip" dir=in interface=any action=block remoteip=$ip
                    "$((Get-Date).ToString('s')) - Autoban $ip" | Out-File -FilePath C:\ProgramData\pcgmz-autoban.log -Append
                  }
                }
              }
            }
            Start-Sleep -Seconds 30
          }
"@
          $path = "$env:ProgramData\\pcgmz-autoban.ps1"
          $script | Out-File -FilePath $path -Encoding ascii
          Start-Process powershell -ArgumentList "-ExecutionPolicy Bypass -File $path" -WindowStyle Hidden
          Write-Host "Brute-force autoban monitor started"

      - name: Disguise OS fingerprinting (network-level tweaks)
        shell: powershell
        run: |
          # Adjust some TCP/IP values to alter passive fingerprinting surface
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name 'DefaultTTL' -Value 64 -PropertyType DWord -Force
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' -Name 'TcpWindowSize' -Value 64240 -PropertyType DWord -Force
          # Randomize TCP timestamps (best-effort by disabling RFC1323 timestamps)
          netsh int tcp set global timestamps=disabled
          Write-Host "OS/network fingerprinting surface reduced (best-effort)"

      - name: GPU passthrough kernel scheduling boost & RTX tweaks
        shell: powershell
        run: |
          # Reinforce GPU scheduling and priority tweaks (best-effort on runner hardware)
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\GraphicsDrivers' -Name 'HwSchMode' -Value 2 -PropertyType DWord -Force
          New-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl' -Name 'GPU Priority' -Value 8 -PropertyType DWord -Force
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\PriorityControl" /v Win32PrioritySeparation /t REG_DWORD /d 38 /f
          Write-Host "GPU scheduling and RTX low-latency tweaks applied"

      - name: High precision timers & packet pacing
        shell: powershell
        run: |
          # Attempt to enable high precision timer policy
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" /v SystemResponsiveness /t REG_DWORD /d 0 /f
          # Packet pacing hints (best-effort): set congestion provider and ECN already set earlier
          Write-Host "High precision timer + packet pacing hints applied"

      - name: Auto Reconnect Monitor
        shell: powershell
        run: |
          $script = @"
          while ($true) {
            if (-not (Test-Connection 8.8.8.8 -Count 1 -Quiet)) {
              Restart-Service TermService -Force
              Get-NetAdapter | Disable-NetAdapter -Confirm:$false; Start-Sleep 2; Get-NetAdapter | Enable-NetAdapter -Confirm:$false
            }
            Start-Sleep 15
          }
          "@
          $path = "$env:ProgramData\\rdp-monitor.ps1"
          $script | Out-File $path
          Start-Process powershell -ArgumentList "-ExecutionPolicy Bypass -File $path"

      - name: Verify PCGMZ
        shell: powershell
        run: |
          if ($env:TS_IP) {
            $result = Test-NetConnection -ComputerName $env:TS_IP -Port $env:RDP_PORT -InformationLevel Quiet
            if (-not $result) { Write-Host "Warning: RDP port test failed (this may be due to port randomization)." }
          } else {
            Write-Host "TS_IP not present; skipping connectivity check."
          }

      - name: Enable DirectStorage runtime (if available)
        shell: powershell
        run: |
          if (Get-Command winget -ErrorAction SilentlyContinue) {
            try {
              & winget install --id Microsoft.DirectStorage -e --accept-package-agreements --accept-source-agreements --source winget
              $code = $LASTEXITCODE
              if ($code -ne 0) { Write-Host "winget returned exit code $code. Package may be unavailable in this runner." }
              else { Write-Host "DirectStorage install succeeded (winget exit 0)" }
            } catch {
              Write-Host "winget threw an exception but continuing: $_"
            }
          } else {
            Write-Host "winget not available; skipping DirectStorage install. Manual install recommended: https://aka.ms/directstorage"
          }
          Write-Host "Continuing without DirectStorage..."

      - name: Maintain Connection & Logs Alive
        shell: powershell
        run: |
          Write-Host "==============================="
          Write-Host "PCGMZ Info:"
          Write-Host "Address: $env:TS_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host "RDP Port: $env:RDP_PORT"
          Write-Host "==============================="
          while ($true) {
              "$((Get-Date).ToString('s')) PCGMZ Session still running..." | Out-File -FilePath C:\ProgramData\pcgmz-heartbeat.log -Append
              Start-Sleep -Seconds 300
          }

      - name: Auto-Restart fallback (graceful)
        shell: powershell
        run: |
          # Ensure service auto-restarts and set recovery options for TermService
          sc.exe failure "TermService" reset= 3600 actions= restart/60000/restart/60000/""/0
          Write-Host "Auto-restart fallback configured for TermService"

      - name: Final verification (light)
        shell: powershell
        run: |
          Write-Host "PCGMZ setup complete. Check logs: C:\ProgramData\\pcgmz-*.log and firewall rules starting with 'Block-' for autobans."
